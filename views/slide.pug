extends layout

block content
    div(class='container')
        div(class='card mb-4')
            div(class='card-header') #{__('SlideshowSettings')}
            div(class='card-body')
                form(method='post' enctype='multipart/form-data' action='/slide/save' id='slide_save')
                    div(class='pt-2')
                        select(class='form-select' id='SLIDE_DIRS' name='SLIDE_DIRS' multiple required)
                            each dir in imageContainers
                                - if (data.directories.includes(dir))
                                    option(value=dir selected) #{dir}
                                - else
                                    option(value=dir) #{dir}

                    div(class='d-grid gap-2 pt-2')
                        input(type='checkbox' class='btn-check' id='SLIDE_RANDOM' name='SLIDE_RANDOM' checked=data.doRandom autocomplete='off')
                        label(class='btn btn-outline-info bi-shuffle' for='SLIDE_RANDOM' id='SLIDE_RANDOM_LABEL')  #{__('RandomOrder')}

                        input(type='checkbox' class='btn-check' id='SLIDE_NAMES' name='SLIDE_NAMES' checked=data.showNames autocomplete='off')
                        label(class='btn btn-outline-info bi-eye' for='SLIDE_NAMES' id='SLIDE_NAMES_LABEL')  #{__('ShowNames')}

                    div(class='input-group pt-2')
                        span(class='input-group-text') #{__('TimePerImage')}
                        input(type='number' class='form-control' min='5' max='300' id='SLIDE_IMAGE_TIME' name='SLIDE_IMAGE_TIME' value=data.timePerSlide autocomplete='off')
                        span(class='input-group-text') s

                    div(class='input-group pt-2')
                        span(class='input-group-text') #{__('TransitionPeriod')}
                        input(type='number' class='form-control' min='0' max='1000' id='SLIDE_TRANSITION_TIME' name='SLIDE_TRANSITION_TIME' value=data.transitionTime autocomplete='off')
                        span(class='input-group-text') ms
                    br
                    div(class='d-grid')
                        button(type='submit' class='btn btn-primary bi-floppy')  #{__('Save')}

        div(class='card mb-4')
            div(class='card-header')  #{__('SlideshowStatus')}
            div(class='card-body')
                div(class='text-center mb-3' id='current-image-container' style='display: none;')
                    img(id='current-image' class='img-fluid rounded' style='max-height: 300px; max-width: 100%;')
                div(class='table-responsive')
                    table(class="table table-hover table-striped rounded-3 overflow-hidden")
                        colgroup
                            col(style="width: 30%;")
                            col(style="width: 70%;")
                        thead(id='mode-head')
                        tbody(id='mode-content')
                            tr()
                                td() #{__('Loading')}

        div(class='card mb-4')
            div(class='card-header') #{__('SlideshowControl')}
            div(class='card-body')
                div(class='container text-center')
                    div(class='row g-2')
                        div(class='col-12 col-md-3 mb-2')
                            button(type='button' class='btn btn-primary bi-arrow-left-circle w-100' id='btn-prev')  #{__('Previous')}
                        div(class='col-12 col-md-3 mb-2')
                            button(type='button' class='btn btn-primary bi-pause-circle w-100' id='btn-pause')  #{__('Pause/Resume')}
                        div(class='col-12 col-md-3 mb-2')
                            button(type='button' class='btn btn-primary bi-arrow-right-circle w-100' id='btn-next')  #{__('Next')}
                        div(class='col-12 col-md-3 mb-2')
                            button(type='button' class='btn btn-primary bi-info-square w-100' id='btn-statusline')  #{__('StatusLine')}
                hr
                form(method='post' enctype='multipart/form-data' action='/slide/start' id='slide_start')
                    div(class='input-group pb-2')
                        span(class='input-group-text') #{__('Duration')}
                        input(type='number' class='form-control' min='0' id='SLIDE_SHOW_HOURS' name='SLIDE_SHOW_HOURS' autocomplete='off')
                        span(class='input-group-text') h
                        input(type='number' class='form-control' min='0' max='59' id='SLIDE_SHOW_MINUTES' name='SLIDE_SHOW_MINUTES' autocomplete='off')
                        span(class='input-group-text') m
                    button(type='submit' class='btn btn-success bi-play-circle w-100')  #{__('Start')}
                hr
                button(type='button' class='btn btn-warning bi-stop-circle w-100' id='btn-stop')  #{__('Stop')}

    script.
        function updateSlideshowStatus(data) {
            $('#mode-head').empty();
            $('#mode-content').empty();
            $('#mode-head').append(
                "<tr>" +
                    "<th>" + '#{__('Key')}' + "</td>" +
                    "<th>" + '#{__('Value')}' + "</td>" +
                "</tr>"
            );

            addTableRow('#mode-content', '#{__('Active')}', data.active ? '#{__('Yes')}' : '#{__('No')}');

            if ( data.active && Object.keys(data.status).length > 0 )
            {
                const path_parts = data.status.image_path.split('/');
                const image_name = path_parts[path_parts.length - 1];
                const image_container = path_parts[path_parts.length - 2];
                const image_resolution = data.status.image_width + "x" + data.status.image_height
                const last_switch = new Date(data.status.timestamp * 1000);

                const imageUrl = '/image/view/' + image_container + '/' + image_name;
                $('#current-image').attr('src', imageUrl);
                $('#current-image-container').show();

                addTableRow('#mode-content', '#{__('Paused')}', data.status.paused ? '#{__('Yes')}' : '#{__('No')}');
                addTableRow('#mode-content', '#{__('StatusLine')}', data.status.statusline ? '#{__('Yes')}' : '#{__('No')}');
                addTableRow('#mode-content', '#{__('Image')}', image_name);
                addTableRow('#mode-content', '#{__('Directory')}', image_container);
                addTableRow('#mode-content', '#{__('ImageResolution')}', image_resolution);
                addTableRow('#mode-content', '#{__('ImageIndex')}', data.status.image_number);
                addTableRow('#mode-content', '#{__('TotalImages')}', data.status.total_images);
                addTableRow('#mode-content', '#{__('LastSwitch')}', last_switch.toLocaleString());
            } else {
                $('#current-image-container').hide();
            }
        }

        function initializeSSE() {
            const eventSource = new EventSource('/slide/status/stream');
            
            eventSource.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    updateSlideshowStatus(data);
                } catch (e) {
                    console.error('Error parsing SSE data:', e);
                }
            };

            eventSource.onerror = function(event) {
                console.error('SSE connection error:', event);
            };

            eventSource.onopen = function(event) {};

            window.addEventListener('beforeunload', function() {
                eventSource.close();
            });
        }

        function addTableRow(table_id, key, value) {
            $(table_id).append(
                "<tr>" +
                    "<td>" + key + "</td>" +
                    "<td>" + value + "</td>" +
                "</tr>"
            );
        }

        function postSlideCommand(command) {
            $.ajax({
                url: '/slide/' + command,
                method: 'POST',
                error: function(err) {
                    console.error('Error sending slideshow command:', err);
                }
            });
        }

        $(document).ready(() => {
            // Initialize SSE connection for real-time updates
            initializeSSE();

            // Control buttons
            $('#btn-prev').click(function() {
                postSlideCommand('prev');
            });

            $('#btn-pause').click(function() {
                postSlideCommand('pause');
            });

            $('#btn-next').click(function() {
                postSlideCommand('next');
            });

            $('#btn-statusline').click(function() {
                postSlideCommand('statusline');
            });

            // Settings form
            $('#slide_save').on('submit', function(e) {
                e.preventDefault();
                
                $.ajax({
                    url: '/slide/save',
                    method: 'POST',
                    data: $(this).serialize(),
                    error: function(err) {
                        console.error('Error saving settings:', err);
                    }
                });
            });

            // Start slideshow form
            $('#slide_start').on('submit', function(e) {
                e.preventDefault();
                
                $.ajax({
                    url: '/slide/start',
                    method: 'POST',
                    data: $(this).serialize(),
                    success: function(data) {
                        // Clear the duration inputs
                        $('#SLIDE_SHOW_HOURS, #SLIDE_SHOW_MINUTES').val('');
                    },
                    error: function(err) {
                        console.error('Error starting slideshow:', err);
                    }
                });
            });

            $('#btn-stop').click(function() {
                postSlideCommand('stop');
            });
        });